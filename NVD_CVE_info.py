import requests
import json
import os
import csv
from time import sleep

'''
访问URL：https://services.nvd.nist.gov/rest/json/cves/2.0
参数设置：startIndex=0，2000，4000...
每次请求返回2000条json信息，
'''

url='https://services.nvd.nist.gov/rest/json/cves/2.0'
headers = {
      'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:87.0) Gecko/20100101 Firefox/87.0'
    }
startIndex=130000 #起始位置，按2000递增


#url拼接
def url_splice(startIndex):

    url_new=url+'?startIndex='+str(startIndex)
    # print(url_new)
    return url_new

#cve爬取
def cve_crawler(url,headers,count):
    response=requests.get(url=url,headers=headers)
    response.encoding='utf-8'
    # print(response.status_code)
    # print(response.text)
    if response.status_code==200:
        json_data=json.loads(response.text)
        # print(json_data)
        vulnerabilities_list=json_data['vulnerabilities']
        # print(vulnerabilities_list[0])
        for i in range(len(vulnerabilities_list)):
            info_list=[]
            cve_id=vulnerabilities_list[i]['cve']['id']
            sourceIdentifier=vulnerabilities_list[i]['cve']['sourceIdentifier']
            published=vulnerabilities_list[i]['cve']['published']
            lastModified=vulnerabilities_list[i]['cve']['lastModified']
            vulnStatus=vulnerabilities_list[i]['cve']['vulnStatus']
            descriptions=vulnerabilities_list[i]['cve']['descriptions'][0]
            descriptions_lang=descriptions['lang']
            descriptions_value=descriptions['value']
            info_list.extend([cve_id,sourceIdentifier,published,lastModified,vulnStatus,descriptions_lang,descriptions_value])

            metrics=vulnerabilities_list[i]['cve']['metrics']
            if 'cvssMetricV31' in metrics:
                cvssMetricV31=metrics['cvssMetricV31']
                cvssMetricV31_source=cvssMetricV31[0]['source']
                cvssMetricV31_type=cvssMetricV31[0]['type']
                cvssMetricV31_cvssData=cvssMetricV31[0]['cvssData']
                cvssMetricV31_cvssData_version=cvssMetricV31_cvssData['version']
                cvssMetricV31_cvssData_vectorString=cvssMetricV31_cvssData['vectorString']
                cvssMetricV31_cvssData_attackVector=cvssMetricV31_cvssData['attackVector']
                cvssMetricV31_cvssData_attackComplexity=cvssMetricV31_cvssData['attackComplexity']
                cvssMetricV31_cvssData_privilegesRequired=cvssMetricV31_cvssData['privilegesRequired']
                cvssMetricV31_cvssData_userInteraction=cvssMetricV31_cvssData['userInteraction']
                cvssMetricV31_cvssData_scope=cvssMetricV31_cvssData['scope']
                cvssMetricV31_cvssData_confidentialityImpact=cvssMetricV31_cvssData['confidentialityImpact']
                cvssMetricV31_cvssData_integrityImpact=cvssMetricV31_cvssData['integrityImpact']
                cvssMetricV31_cvssData_availabilityImpact=cvssMetricV31_cvssData['availabilityImpact']
                cvssMetricV31_cvssData_baseScore=cvssMetricV31_cvssData['baseScore']
                cvssMetricV31_cvssData_baseSeverity=cvssMetricV31_cvssData['baseSeverity']
                cvssMetricV31_exploitabilityScore=cvssMetricV31[0]['exploitabilityScore']
                cvssMetricV31_impactScore=cvssMetricV31[0]['impactScore']
                info_list.extend([cvssMetricV31_source,cvssMetricV31_type,cvssMetricV31_cvssData_version,cvssMetricV31_cvssData_vectorString,cvssMetricV31_cvssData_attackVector,cvssMetricV31_cvssData_attackComplexity,cvssMetricV31_cvssData_privilegesRequired,
                                 cvssMetricV31_cvssData_userInteraction,cvssMetricV31_cvssData_scope,cvssMetricV31_cvssData_confidentialityImpact,cvssMetricV31_cvssData_integrityImpact,cvssMetricV31_cvssData_availabilityImpact,cvssMetricV31_cvssData_baseScore,
                                 cvssMetricV31_cvssData_baseSeverity,cvssMetricV31_exploitabilityScore,cvssMetricV31_impactScore])
            else:
                info_list.extend(['','','','','','','','','','','','','','','',''])
            if 'cvssMetricV2' in metrics:
                cvssMetricV2=metrics['cvssMetricV2']
                cvssMetricV2_source=cvssMetricV2[0]['source']
                cvssMetricV2_type=cvssMetricV2[0]['type']
                cvssMetricV2_cvssData=cvssMetricV2[0]['cvssData']
                cvssMetricV2_cvssData_version=cvssMetricV2_cvssData['version']
                cvssMetricV2_cvssData_vectorString=cvssMetricV2_cvssData['vectorString']
                cvssMetricV2_cvssData_accessVector=cvssMetricV2_cvssData['accessVector']
                cvssMetricV2_cvssData_accessComplexity=cvssMetricV2_cvssData['accessComplexity']
                cvssMetricV2_cvssData_authentication=cvssMetricV2_cvssData['authentication']
                cvssMetricV2_cvssData_confidentialityImpact=cvssMetricV2_cvssData['confidentialityImpact']
                cvssMetricV2_cvssData_integrityImpact=cvssMetricV2_cvssData['integrityImpact']
                cvssMetricV2_cvssData_availabilityImpact=cvssMetricV2_cvssData['availabilityImpact']
                cvssMetricV2_cvssData_baseScore=cvssMetricV2_cvssData['baseScore']
                cvssMetricV2_baseSeverity=cvssMetricV2[0]['baseSeverity']
                cvssMetricV2_exploitabilityScore=cvssMetricV2[0]['exploitabilityScore']
                cvssMetricV2_impactScore=cvssMetricV2[0]['impactScore']
                cvssMetricV2_acInsufInfo=cvssMetricV2[0]['acInsufInfo']
                cvssMetricV2_obtainAllPrivilege=cvssMetricV2[0]['obtainAllPrivilege']
                cvssMetricV2_obtainUserPrivilege=cvssMetricV2[0]['obtainUserPrivilege']
                cvssMetricV2_obtainOtherPrivilege=cvssMetricV2[0]['obtainOtherPrivilege']
                if 'userInteractionRequired'in cvssMetricV2[0]:
                    cvssMetricV2_userInteractionRequired=cvssMetricV2[0]['userInteractionRequired']
                else:
                    cvssMetricV2_userInteractionRequired=''
                # cvssMetricV2_userInteractionRequired=cvssMetricV2[0]['userInteractionRequired']
                info_list.extend([cvssMetricV2_source,cvssMetricV2_type,cvssMetricV2_cvssData_version,cvssMetricV2_cvssData_vectorString,cvssMetricV2_cvssData_accessVector,cvssMetricV2_cvssData_accessComplexity,cvssMetricV2_cvssData_authentication,
                                 cvssMetricV2_cvssData_confidentialityImpact,cvssMetricV2_cvssData_integrityImpact,cvssMetricV2_cvssData_availabilityImpact,cvssMetricV2_cvssData_baseScore,cvssMetricV2_baseSeverity,cvssMetricV2_exploitabilityScore,cvssMetricV2_impactScore,
                                 cvssMetricV2_acInsufInfo,cvssMetricV2_obtainAllPrivilege,cvssMetricV2_obtainUserPrivilege,cvssMetricV2_obtainOtherPrivilege,cvssMetricV2_userInteractionRequired])
            else:
                info_list.extend(['','','','','','','','','','','','','','','','','','',''])

            if 'weaknesses' in vulnerabilities_list[i]['cve']:
                weaknesses=vulnerabilities_list[i]['cve']['weaknesses']
                weaknesses_source=weaknesses[0]['source']
                weaknesses_type=weaknesses[0]['type']
                weaknesses_description=weaknesses[0]['description']
                weaknesses_description_lang=weaknesses_description[0]['lang']
                weaknesses_description_value=weaknesses_description[0]['value']
                info_list.extend([weaknesses_source,weaknesses_type,weaknesses_description_lang,weaknesses_description_value])
            else:
                info_list.extend(['','','',''])

            if 'configurations' in vulnerabilities_list[i]['cve']:
                configurations=vulnerabilities_list[i]['cve']['configurations']
                configurations_nodes=configurations[0]['nodes']
                for j in range(len(configurations_nodes)):
                    if 'operator' in configurations_nodes[j]:
                        operator=configurations_nodes[j]['operator']
                        negate=configurations_nodes[j]['negate']
                        info_list.extend([operator,negate])
                    else:
                        info_list.extend(['',''])
                    cpeMatch=configurations_nodes[j]['cpeMatch']
                    for k in range(len(cpeMatch)):
                        cpeMatch_vulnerable=cpeMatch[k]['vulnerable']
                        cpeMatch_criteria=cpeMatch[k]['criteria']
                        cpeMatch_matchCriteriaId=cpeMatch[k]['matchCriteriaId']
                        info_list.extend([cpeMatch_vulnerable,cpeMatch_criteria,cpeMatch_matchCriteriaId])
                        if 'versionStartIncluding' in cpeMatch[k]:
                            versionStartIncluding=cpeMatch[k]['versionStartIncluding']
                            info_list.append(versionStartIncluding)
                        else:
                            info_list.append('')
                        if 'versionEndIncluding' in cpeMatch[k]:
                            versionEndIncluding=cpeMatch[k]['versionEndIncluding']
                            info_list.append(versionEndIncluding)
                        else:
                            info_list.append('')
                else:
                    info_list.extend(['','','','','','',''])

            references=vulnerabilities_list[i]['cve']['references']
            for j in range(len(references)):
                reference_url=references[j]['url']
                reference_source=references[j]['source']
                info_list.extend([reference_url, reference_source])
                if 'tags' in references[j]:
                    reference_tags_list=references[j]['tags']
                    info_list.extend(reference_tags_list)
                else:
                    info_list.extend(['',''])

            # print(info_list)
            # break
            save_to_csv(info_list,count)

#存储为csv文件
def save_to_csv(cve_list,count):
    f_csv = open('cve_info_'+str(count)+'.csv', 'a', encoding='utf-8', newline='')
    csv_write = csv.writer(f_csv)
    csv_write.writerow(cve_list)
    f_csv.close()


if __name__ == '__main__':
    count = 66
    while startIndex<=246000:
        target_url=url_splice(startIndex)
        cve_crawler(target_url, headers, count)
        print(target_url+'页爬取完成')
        startIndex+=2000
        count+=1
        sleep(30)

    # 写入标题头
    # f_csv = open('cve_info_test.csv', 'a', encoding='utf-8', newline='')
    # csv_write = csv.writer(f_csv)
    # head=['cve_id','sourceIdentifier','published','lastModified','vulnStatus','descriptions_lang','descriptions_value',
    #       'cvssMetricV31_source', 'cvssMetricV31_type', 'cvssMetricV31_cvssData_version', 'cvssMetricV31_cvssData_vectorString',
    #       'cvssMetricV31_cvssData_attackVector', 'cvssMetricV31_cvssData_attackComplexity',
    #       'cvssMetricV31_cvssData_privilegesRequired',
    #       'cvssMetricV31_cvssData_userInteraction', 'cvssMetricV31_cvssData_scope',
    #       'cvssMetricV31_cvssData_confidentialityImpact', 'cvssMetricV31_cvssData_integrityImpact',
    #       'cvssMetricV31_cvssData_availabilityImpact', 'cvssMetricV31_cvssData_baseScore',
    #       'cvssMetricV31_cvssData_baseSeverity', 'cvssMetricV31_exploitabilityScore', 'cvssMetricV31_impactScore',
    #       'cvssMetricV2_source', 'cvssMetricV2_type', 'cvssMetricV2_cvssData_version', 'cvssMetricV2_cvssData_vectorString',
    #       'cvssMetricV2_cvssData_accessVector', 'cvssMetricV2_cvssData_accessComplexity',
    #       'cvssMetricV2_cvssData_authentication',
    #       'cvssMetricV2_cvssData_confidentialityImpact', 'cvssMetricV2_cvssData_integrityImpact',
    #       'cvssMetricV2_cvssData_availabilityImpact', 'cvssMetricV2_cvssData_baseScore', 'cvssMetricV2_baseSeverity',
    #       'cvssMetricV2_exploitabilityScore', 'cvssMetricV2_impactScore',
    #       'cvssMetricV2_acInsufInfo', 'cvssMetricV2_obtainAllPrivilege', 'cvssMetricV2_obtainUserPrivilege',
    #       'cvssMetricV2_obtainOtherPrivilege', 'cvssMetricV2_userInteractionRequired'
    #       'weaknesses_source','weaknesses_type','weaknesses_description_lang','weaknesses_description_value',
    #       'configurations_operator','configurations_negate',
    #       'cpeMatch_vulnerable','cpeMatch_criteria','cpeMatch_matchCriteriaId',
    #       'versionStartIncluding','versionEndIncluding',
    #       'reference_tags_1','reference_tags_2']
    # csv_write.writerow(head)
    # f_csv.close()


